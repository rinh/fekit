// Generated by CoffeeScript 1.7.1
(function() {
  var slice;

  slice = function(arry, pos) {
    return Array.prototype.slice.call(arry, pos);
  };

  exports.add = function(num1, num2) {
    var tmp, v, _i, _len;
    v = 0;
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      tmp = arguments[_i];
      v += parseFloat(tmp);
    }
    return v;
  };

  exports.sub = function(num1, num2) {
    var tmp, v, _i, _len, _ref;
    v = parseFloat(num1);
    _ref = slice(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tmp = _ref[_i];
      v -= parseFloat(tmp);
    }
    return v;
  };

  exports.mul = function(num1, num2) {
    var tmp, v, _i, _len;
    v = 1;
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      tmp = arguments[_i];
      v *= parseFloat(~~tmp);
    }
    return v;
  };

  exports.div = function(num1, num2) {
    var tmp, v, _i, _len, _ref;
    v = parseFloat(num1);
    _ref = slice(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tmp = _ref[_i];
      tmp = parseFloat(tmp);
      if (tmp === 0) {
        return null;
      }
      v /= tmp;
    }
    return v;
  };

  exports.max = function(num1, num2) {
    var tmp, v, _i, _len, _ref;
    v = parseFloat(num1);
    _ref = slice(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tmp = _ref[_i];
      tmp = parseFloat(tmp);
      v < tmp && (v = tmp);
    }
    return v;
  };

  exports.min = function(num1, num2) {
    var tmp, v, _i, _len, _ref;
    v = parseFloat(num1);
    _ref = slice(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tmp = _ref[_i];
      tmp = parseFloat(tmp);
      v > tmp && (v = tmp);
    }
    return v;
  };

  exports.pow = function(num1, num2) {
    if (!num1 || !num2) {
      return null;
    }
    return Math.pow(num1, num2);
  };

  exports.floor = function(num1, num2) {
    if (!num1 || !num2) {
      return null;
    }
    return Math.floor(num1 / num2);
  };

  exports.idiv = function(num1, num2) {
    if (!num1 || !num2 || ~~num2 === 0) {
      return null;
    }
    return ~~(~~num1 / ~~num2);
  };

  exports.mod = function(num1, num2) {
    if (!num1 || !num2 || ~~num2 === 0) {
      return null;
    }
    return ~~(~~num1 % ~~num2);
  };

  exports.abs = function(num) {
    if (!num) {
      return null;
    }
    return Math.abs(parseFloat(num));
  };

  exports.ceil = function(num) {
    if (!num) {
      return null;
    }
    return ~~Math.ceil(parseFloat(num));
  };

  exports.random = function() {
    return Math.random();
  };

}).call(this);
