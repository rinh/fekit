// Generated by CoffeeScript 1.7.1
(function() {
  var LOOPS, MAX_LOOP_COUNT, Module, addPlugin, async, booster, fs, getSource, pluginsDir, syspath, utils, _;

  async = require('async');

  syspath = require('path');

  fs = require('fs');

  utils = require('../util');

  _ = require('underscore');

  exports.booster = booster = require('./module/booster');

  Module = require("./module/module").Module;

  Module.booster = booster;

  exports.path = Module.path;


  /* ---------------------------
      插件系统
   */

  exports.getContentType = function(url) {
    return Module.getContentType(syspath.extname(url));
  };

  addPlugin = function(extName, plugin) {
    return Module.addExtensionPlugin(extName, plugin);
  };

  pluginsDir = syspath.join(syspath.dirname(__filename), "plugins");

  utils.path.each_directory(pluginsDir, (function(_this) {
    return function(filepath) {
      var extname, type;
      extname = syspath.extname(filepath);
      type = "." + syspath.basename(filepath, extname);
      return addPlugin(type, require(filepath));
    };
  })(this));


  /* -----------------------
      export
   */

  LOOPS = {};

  MAX_LOOP_COUNT = 70;

  getSource = function(module, options, callback) {
    return module.analyze(function(err) {
      var USED_MODULES, arr, deps, sub_module, _i, _len, _ref, _tmp;
      if (err) {
        callback(err);
        return;
      }
      arr = [];
      USED_MODULES = options.use_modules;
      if (options.render_dependencies) {
        module.getSourceWithoutDependencies = options.render_dependencies;
      }
      deps = [];
      if (options.no_dependencies !== true) {
        _ref = module.depends;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sub_module = _ref[_i];
          _tmp = function(sub_module) {
            return (function(_this) {
              return function(seriesCallback) {
                LOOPS[sub_module.guid] = (LOOPS[sub_module.guid] || 0) + 1;
                if (LOOPS[sub_module.guid] > MAX_LOOP_COUNT) {
                  seriesCallback("出现循环调用，请检查 " + sub_module.path.uri + " 的引用");
                }
                if (USED_MODULES[sub_module.guid]) {
                  utils.proc.setImmediate(seriesCallback);
                  return;
                }
                return getSource(sub_module, options, function(e, txt) {
                  arr.push(txt);
                  return utils.proc.setImmediate(function() {
                    return seriesCallback(e);
                  });
                });
              };
            })(this);
          };
          deps.push(_tmp(sub_module));
        }
      }
      return async.series(deps, function(err) {
        if (err) {
          callback(err);
          return;
        }
        arr.push(module.getSourceWithoutDependencies());
        USED_MODULES[module.guid] = 1;
        return callback(null, arr.join(utils.file.NEWLINE));
      });
    });
  };


  /*
   options {
      // 依赖的文件列表(fullpath)
      dependencies_filepath_list : []
      // 使用非依赖模式
      no_dependencies : false , 
      // 非依赖模式的生成方案
      render_dependencies : function , 
      // 根模块文件路径(可有可无,如果没有则默认当前处理文件为root_module)
      root_module_path : ""
   }
   */

  exports.compile = function(filepath, options, doneCallback) {
    var module, use_modules, _done, _iter, _list;
    LOOPS = {};
    if (arguments.length === 3) {
      options = options || {};
      doneCallback = doneCallback;
    } else if (arguments.length === 2) {
      doneCallback = options;
      options = {};
    }
    use_modules = {};
    module = Module.parse(filepath, null, Module.parse(options.root_module_path || filepath));
    _list = options.dependencies_filepath_list || [];
    _iter = function(dep_path, seriesCallback) {
      var parent_module;
      parent_module = new Module(dep_path);
      return parent_module.analyze(function(err) {
        _.extend(use_modules, parent_module.getDependenciesURI());
        return utils.proc.setImmediate(function() {
          return seriesCallback(err);
        });
      });
    };
    _done = function(err) {
      if (err) {
        doneCallback(err);
        return;
      }
      return getSource(module, {
        use_modules: use_modules,
        no_dependencies: !!options.no_dependencies,
        render_dependencies: options.render_dependencies
      }, function(err, result) {
        return doneCallback(err, result);
      });
    };
    return utils.async.series(_list, _iter, _done);
  };

  exports.boost = function(opts) {
    return booster.init(opts);
  };

}).call(this);
