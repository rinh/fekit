// Generated by CoffeeScript 1.4.0
(function() {
  var DateTool, EscapeTool, MathTool, NumberTool, Velocity, contentType, slice, syspath, sysurl, urlrouter, utils, vm;

  vm = require("vm");

  urlrouter = require("urlrouter");

  Velocity = require("velocityjs");

  utils = require('../util');

  sysurl = require("url");

  syspath = require("path");

  contentType = {
    'Content-Type': "text/html;charset=UTF-8"
  };

  module.exports = function(options) {
    var ROOT;
    ROOT = options.cwd;
    return urlrouter(function(app) {
      return app.get(/\.(vm|vmhtml)\b/, function(req, res, next) {
        var conf, ctx, err, macros, p, txt, url, vmjs_path, vmjson_path, _render;
        err = function(msg) {
          utils.logger.error(msg);
          res.writeHead(500, contentType);
          return res.end(msg);
        };
        url = sysurl.parse(req.url);
        p = syspath.join(ROOT, url.pathname);
        txt = utils.file.io.read(p);
        vmjs_path = p.replace('.vm', '.vmjs');
        vmjson_path = p.replace('.vm', '.json');
        conf = utils.config.parse(p);
        _render = function(data, ctx, macros) {
          return (new Velocity.Compile(Velocity.Parser.parse(data))).render(ctx, macros);
        };
        if (utils.path.exists(vmjs_path)) {
          delete require.cache[vmjs_path];
          ctx = require(vmjs_path);
        } else if (utils.path.exists(vmjson_path)) {
          ctx = utils.file.io.readJSON(vmjson_path);
        } else {
          ctx = {};
        }
        ctx.esc = EscapeTool;
        ctx.date = DateTool;
        ctx.math = MathTool;
        ctx.number = NumberTool;
        macros = {
          load: function(path) {
            return this.jsmacros.parse.call(this, path);
          },
          parse: function(path) {
            var content, root, _p, _ref, _ref1;
            root = conf != null ? (_ref = conf.root) != null ? (_ref1 = _ref.development) != null ? _ref1.velocity_root : void 0 : void 0 : void 0;
            if (root) {
              root = utils.path.join(conf.fekit_root_dirname, root);
              _p = utils.path.join(root, path.replace(/^\//, './'));
            } else {
              _p = utils.path.join(utils.path.dirname(p), path);
            }
            content = utils.file.io.read(_p);
            return _render(content, this.context, this.macros);
          },
          ver: function(path) {
            return '';
          }
        };
        res.writeHead(200, contentType);
        return res.end(_render(txt, ctx, macros));
      });
    });
  };

  EscapeTool = {};

  EscapeTool.html = function(str) {
    return String(str).replace(/&(?!\w+;)/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
  };

  EscapeTool.javascript = function(str) {
    return String(str).replace(/\\/g, '\\\\').replace(/'/g, '\\\'').replace(/"/g, '\\\"').replace(/\//g, '//');
  };

  EscapeTool.url = function(str) {
    return encodeURIComponent(str);
  };

  EscapeTool.java = function(str) {
    return String(str).replace(/\\/g, '\\\\').replace(/\"/g, '\\\"');
  };

  EscapeTool.json = function(str) {
    return String(str).replace(/\\/g, '\\\\').replace(/\"/g, '\\\"').replace(/\//g, '//');
  };

  MathTool = {};

  slice = function(arry, pos) {
    return Array.prototype.slice.call(arry, pos);
  };

  MathTool.add = function(num1, num2) {
    var tmp, v, _i, _len;
    v = 0;
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      tmp = arguments[_i];
      v += parseFloat(tmp);
    }
    return v;
  };

  MathTool.sub = function(num1, num2) {
    var tmp, v, _i, _len, _ref;
    v = parseFloat(num1);
    _ref = slice(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tmp = _ref[_i];
      v -= parseFloat(tmp);
    }
    return v;
  };

  MathTool.mul = function(num1, num2) {
    var tmp, v, _i, _len;
    v = 1;
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      tmp = arguments[_i];
      v *= parseFloat(~~tmp);
    }
    return v;
  };

  MathTool.div = function(num1, num2) {
    var tmp, v, _i, _len, _ref;
    v = parseFloat(num1);
    _ref = slice(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tmp = _ref[_i];
      tmp = parseFloat(tmp);
      if (tmp === 0) {
        return null;
      }
      v /= tmp;
    }
    return v;
  };

  MathTool.max = function(num1, num2) {
    var tmp, v, _i, _len, _ref;
    v = parseFloat(num1);
    _ref = slice(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tmp = _ref[_i];
      tmp = parseFloat(tmp);
      v < tmp && (v = tmp);
    }
    return v;
  };

  MathTool.min = function(num1, num2) {
    var tmp, v, _i, _len, _ref;
    v = parseFloat(num1);
    _ref = slice(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tmp = _ref[_i];
      tmp = parseFloat(tmp);
      v > tmp && (v = tmp);
    }
    return v;
  };

  MathTool.pow = function(num1, num2) {
    if (!num1 || !num2) {
      return null;
    }
    return Math.pow(num1, num2);
  };

  MathTool.floor = function(num1, num2) {
    if (!num1 || !num2) {
      return null;
    }
    return Math.floor(num1, num2);
  };

  MathTool.idiv = function(num1, num2) {
    if (!num1 || !num2 || ~~num2 === 0) {
      return null;
    }
    return ~~(~~num1 / ~~num2);
  };

  MathTool.mod = function(num1, num2) {
    if (!num1 || !num2 || ~~num2 === 0) {
      return null;
    }
    return ~~(~~num1 % ~~num2);
  };

  MathTool.abs = function(num) {
    if (!num) {
      return null;
    }
    return Math.abs(parseFloat(num));
  };

  MathTool.ceil = function(num) {
    if (!num) {
      return null;
    }
    return ~~Math.ceil(parseFloat(num));
  };

  MathTool.random = function() {
    return Math.random();
  };

  NumberTool = {};

  NumberTool.interger = function(v) {
    return ~~v;
  };

  NumberTool.currency = function(v) {
    return '$' + v;
  };

  NumberTool.percent = function(v) {
    return v * 100 + '%';
  };

  NumberTool.format = function(v) {
    return Math.round(v * 10) / 10;
  };

  DateTool = {};

  DateTool.getSystemDate = function() {
    return new Date();
  };

  DateTool.getYear = function() {
    return new Date().getFullYear();
  };

  DateTool.getMonth = function() {
    return new Date().getMonth() + 1;
  };

  DateTool.getDay = function() {
    return new Date().getDate();
  };

}).call(this);
