// Generated by CoffeeScript 1.4.0
(function() {
  var ACTION, do_actions, exjson, get_actions, helper_mockjson, noop, qs, read, request, urlparser, util, utils, vm;

  request = require('request');

  urlparser = require('url');

  vm = require('vm');

  utils = require("../util");

  util = require("util");

  helper_mockjson = require("./helper_mockjson");

  qs = require("querystring");

  /*
  启动 fekit server 时，可以通过读取配置，进行不同的mock处理
  如: fekit server -m ~/myurl.conf
  
  mock.json是一个针对域名作的代理服务配置文件,内容为
      module.exports = {
          * key 可以是正则表达式, 也可以是字符串
          * value 以不同的配置，进行不同的操作，具体见 ACTION
          * 默认的 value 是string, uri以后缀名或内容判断 ACTION
              .json -> raw
              .js   -> action
              .mockjson -> mockjson
              包含 http:// 或 https://  -> proxy_pass
      }
  */


  module.exports = function(options) {
    var mock_file;
    if (!(options.mock && utils.path.exists(options.mock))) {
      return noop;
    }
    utils.logger.log("成功加载 mock 配置 " + options.mock);
    mock_file = utils.file.io.readbymtime(options.mock);
    return function(req, res, next) {
      var action, key, pattern, pieces, result, rule, rules, sandbox, url, _i, _len, _ref;
      sandbox = {
        module: {
          exports: {}
        }
      };
      try {
        vm.runInNewContext(exjson(mock_file()), sandbox);
      } catch (err) {
        sandbox.module.exports = {};
        utils.logger.error("mock 配置文件出错 " + (err.toString()));
      }
      rules = sandbox.module.exports.rules || [];
      delete sandbox.module.exports.rules;
      _ref = sandbox.module.exports;
      for (key in _ref) {
        action = _ref[key];
        pieces = key.split("^^^");
        pattern = pieces.length === 2 ? RegExp.apply(null, pieces) : key;
        rules.push({
          pattern: pattern,
          respondwith: action
        });
      }
      url = req.url;
      for (_i = 0, _len = rules.length; _i < _len; _i++) {
        rule = rules[_i];
        if (util.isRegExp(rule.pattern)) {
          result = url.match(rule.pattern);
        } else {
          result = url === rule.pattern;
        }
        if (result) {
          return do_actions(result, rule, req, res, options);
        }
      }
      return next();
    };
  };

  do_actions = function(result, rule, req, res, options) {
    var action_config, action_key, actions, context, jobs;
    actions = rule.respondwith;
    actions = (function() {
      switch (false) {
        case typeof actions !== 'string':
          return get_actions(actions);
        case typeof actions !== 'function':
          return {
            action: actions
          };
        default:
          return {};
      }
    })();
    jobs = (function() {
      var _results;
      _results = [];
      for (action_key in actions) {
        action_config = actions[action_key];
        if (ACTION[action_key]) {
          _results.push({
            action: ACTION[action_key],
            user_config: action_config
          });
        }
      }
      return _results;
    })();
    context = {
      req: req,
      res: res,
      result: result,
      rule: rule,
      options: options
    };
    return utils.async.series(jobs, function(item, done) {
      return item.action(item.user_config, context, done);
    }, function(err) {
      if (err) {
        utils.logger.error(err);
        return res.end(err);
      } else {
        return res.end();
      }
    });
  };

  ACTION = {
    /*
            配置案例
            proxy_pass : 'http://l-hslist.corp.qunar.com'
    */

    "proxy_pass": function(user_config, context, done) {
      var conf, proxy_option, qsObject, r, req, urlObject;
      conf = {
        url: '',
        set_header: {}
      };
      if (typeof user_config === 'string') {
        conf.url = user_config;
      }
      conf.urlObject = urlparser.parse(conf.url);
      conf.qsObject = qs.parse(conf.urlObject.query);
      proxy_option = {
        url: '',
        headers: {}
      };
      req = context.req;
      urlObject = urlparser.parse(req.url);
      qsObject = qs.parse(urlObject.query);
      conf.urlObject.query = qs.stringify(utils.extend({}, conf.qsObject, qsObject));
      conf.urlObject.search = "?" + conf.urlObject.query;
      proxy_option.url = urlparser.format(conf.urlObject);
      proxy_option.headers = utils._.extend({}, req.headers, {
        host: conf.urlObject.host
      }, conf.set_header);
      switch (req.method) {
        case 'GET':
          r = request.get(proxy_option).pipe(context.res);
          break;
        case 'POST':
          r = request.post(proxy_option).pipe(context.res);
      }
      return r.on('end', function() {
        return done();
      });
    },
    /*
            配置案例
            "raw" : "./url.json"
    */

    "raw": function(user_config, context, done) {
      var callback, jsonp, jsonstr, key, val, _ref;
      jsonp = context.rule.jsonp || 'callback';
      _ref = context.req.query;
      for (key in _ref) {
        val = _ref[key];
        if (key === jsonp) {
          callback = val;
        }
      }
      jsonstr = read(context, user_config);
      context.res.setHeader("Content-Type", "application/json");
      if (callback) {
        context.res.setHeader("Content-Type", "application/x-javascript");
        if (callback) {
          jsonstr = "" + callback + "(" + (jsonstr.trim()) + ")";
        }
      }
      context.res.write(jsonstr);
      return done();
    },
    /*
            配置案例
            "action" : "./url.js"
    
            在 url.js 中，必须存在
            module.exports = function( req , res , user_config , context ) {
                // res.write("hello");
            }
    */

    "action": function(user_config, context, done) {
      var act_file, sandbox, _base;
      if (typeof user_config !== 'function') {
        act_file = read(context, user_config);
        sandbox = {
          module: {
            exports: noop
          }
        };
        vm.runInNewContext(act_file, sandbox);
        if (typeof (_base = sandbox.module).exports === "function") {
          _base.exports(context.req, context.res, context);
        }
      } else {
        user_config(context.req, context.res, context);
      }
      return done();
    },
    /*
            配置案例
            "mockjson" : "./a.mockjson"
    
            使用方式见：https://github.com/mennovanslooten/mockJSON
    */

    "mockjson": function(user_config, context, done) {
      var callback, dir, json, jsonp, jsonstr, key, val, _ref;
      jsonp = context.rule.jsonp || 'callback';
      _ref = context.req.query;
      for (key in _ref) {
        val = _ref[key];
        if (key === jsonp) {
          callback = val;
        }
      }
      dir = utils.path.dirname(context.options.mock);
      json = utils.file.io.readJSON(utils.path.join(dir, user_config));
      jsonstr = JSON.stringify(helper_mockjson.mockJSON.generateFromTemplate(json));
      context.res.setHeader("Content-Type", "application/json");
      if (callback) {
        context.res.setHeader("Content-Type", "application/x-javascript");
        if (callback) {
          jsonstr = "" + callback + "(" + jsonstr + ")";
        }
      }
      context.res.write(jsonstr);
      return done();
    }
  };

  noop = function(req, res, next) {
    return next();
  };

  exjson = module.exports.exjson = function(txt) {
    return txt.replace(new RegExp("\/(.+)\/([i]*)(\\s*:\\s*)(.+)", "ig"), function($0, $1, $2, $3, $4) {
      return util.inspect($1 + "^^^" + $2) + $3 + $4;
    });
  };

  get_actions = function(actions) {
    switch (false) {
      case !((actions.indexOf('http://')) === 0 || (actions.indexOf('https://')) === 0):
        return {
          proxy_pass: actions
        };
      case (utils.path.extname(actions)) !== ".mockjson":
        return {
          mockjson: actions
        };
      case (utils.path.extname(actions)) !== ".json":
        return {
          raw: actions
        };
      case (utils.path.extname(actions)) !== ".js":
        return {
          action: actions
        };
    }
  };

  read = function(context, partial_path) {
    var dir;
    dir = utils.path.dirname(context.options.mock);
    return utils.file.io.read(utils.path.join(dir, partial_path));
  };

}).call(this);
