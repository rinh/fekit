// Generated by CoffeeScript 1.4.0
(function() {
  var charset, dns, domains, http, mime_config, utils, writeHeader;

  http = require('http');

  dns = require('dns');

  utils = require("../util");

  domains = {};

  mime_config = {
    ".js": "application/javascript",
    ".css": "text/css"
  };

  charset = ";charset=UTF-8";

  writeHeader = function(res, code, type, domain) {
    return res.writeHead(code, {
      'Content-Type': mime_config[type] + charset,
      'Server': ("Fekit Remote " + domain.address + " (") + (domain.custom ? 'Custom' : 'Online') + ")"
    });
  };

  module.exports = {
    load: function(options) {
      var address, domain, rule, _i, _len, _ref, _ref1, _results;
      if (!(options.reverse && options.reverse !== true)) {
        return;
      }
      _ref = options.reverse.split(',');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        _ref1 = rule.split(':'), domain = _ref1[0], address = _ref1[1];
        if (domain) {
          if (address) {
            _results.push(domains[domain] = {
              custom: true,
              address: address
            });
          } else {
            _results.push(dns.resolve4(domain, function(err, addresses) {
              if (!err) {
                return domains[domain] = {
                  custom: false,
                  address: addresses[0]
                };
              }
            }));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    exists: function(domain) {
      return !!domains[domain];
    },
    get: function(domain) {
      return domains[domain];
    },
    request: function(headers, protocol, host, port, pathname, response, type) {
      var req;
      req = http.request({
        host: domains[host].address,
        port: (port != null ? port.substring(1) : void 0) || 80,
        headers: {
          host: headers.host,
          "user-agent": headers["user-agent"]
        },
        path: "" + protocol + "://" + host + port + pathname
      }, function(res) {
        var data;
        data = '';
        res.setEncoding('utf8');
        res.on('data', function(chunk) {
          return data += chunk;
        });
        res.on('end', function() {
          writeHeader(response, 200, type, domains[host]);
          return response.end(data);
        });
        return res.on('error', function(err) {
          writeHeader(response, 500, type, domains[host]);
          utils.logger.error(err);
          return response.end(err);
        });
      });
      req.on('error', function(err) {
        writeHeader(response, 500, type, domains[host]);
        utils.logger.error(err);
        return response.end(err);
      });
      return req.end();
    }
  };

}).call(this);
