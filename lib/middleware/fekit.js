// Generated by CoffeeScript 1.4.0
(function() {
  var PARAM_CACHE, charset, compiler, dns, md5, mime_config, qs, sysfs, syspath, sysurl, toMD5, toPARAM, urlrouter, utils;

  compiler = require("../compiler/compiler");

  urlrouter = require("urlrouter");

  utils = require("../util");

  dns = require("dns");

  qs = require("querystring");

  sysurl = require("url");

  syspath = require("path");

  sysfs = require("fs");

  md5 = require("MD5");

  mime_config = {
    ".js": "application/javascript",
    ".css": "text/css"
  };

  charset = ";charset=UTF-8";

  PARAM_CACHE = {};

  toMD5 = function(str) {
    var m;
    m = md5(str).toString().slice(9).slice(0, 16);
    PARAM_CACHE[m] = str;
    return m;
  };

  toPARAM = function(md5str) {
    return PARAM_CACHE[md5str];
  };

  module.exports = function(options) {
    var ROOT, combine, fekitRouter, no_combine, protocol,
      _this = this;
    compiler.boost({
      cwd: process.cwd(),
      directories: [].concat(options.boost || [])
    });
    ROOT = options.cwd;
    protocol = options.ssl ? "https" : "http";
    no_combine = function(path, parents, host, params, doneCallback) {
      var conf, ctx, custom_script, custom_script_path, port, render_func, _ref, _ref1;
      if (params["no_dependencies"] === "true") {
        return compiler.compile(path, {
          dependencies_filepath_list: parents,
          no_dependencies: true,
          root_module_path: params["root"]
        }, doneCallback);
      } else {
        conf = utils.config.parse(path);
        custom_script = (_ref = conf.root) != null ? (_ref1 = _ref.development) != null ? _ref1.custom_render_dependencies : void 0 : void 0;
        custom_script_path = utils.path.join(conf.fekit_root_dirname, custom_script);
        host = host.replace(/:\d+/, "");
        port = options.port && options.port !== "80" ? ":" + options.port : "";
        if (custom_script && utils.path.exists(custom_script_path)) {
          ctx = utils.proc.requireScript(custom_script_path);
          render_func = function() {
            var partial, _path;
            _path = this.path.getFullPath().replace(ROOT, "").replace(/\\/g, '/').replace('/src/', '/prd/');
            partial = ("" + protocol + "://" + host + port + _path + "?") + toMD5("no_dependencies=true&root=" + (encodeURIComponent(path)));
            return ctx.render({
              type: this.path.getContentType(),
              path: this.path.getFullPath(),
              url: partial,
              base_path: path,
              base_params: params
            });
          };
        } else {
          render_func = function() {
            var partial, _path;
            _path = this.path.getFullPath().replace(ROOT, "").replace(/\\/g, '/').replace('/src/', '/prd/');
            partial = ("" + protocol + "://" + host + port + _path + "?") + toMD5("no_dependencies=true&root=" + (encodeURIComponent(path)));
            switch (this.path.getContentType()) {
              case "javascript":
                return "document.write('<script src=\"" + partial + "\"></script>');";
              case "css":
                return "@import url('" + partial + "');";
            }
          };
        }
        return compiler.compile(path, {
          dependencies_filepath_list: parents,
          render_dependencies: render_func
        }, doneCallback);
      }
    };
    combine = function(path, parents, doneCallback) {
      return compiler.compile(path, {
        dependencies_filepath_list: parents
      }, doneCallback);
    };
    return fekitRouter = urlrouter(function(app) {
      return app.get(utils.UrlConvert.PRODUCTION_REGEX, function(req, res, next) {
        var cache, cachekey, config, ctype, host, is_deps, p, params, srcpath, url, urlconvert, _render;
        host = req.headers['host'];
        url = sysurl.parse(req.url);
        p = syspath.join(ROOT, url.pathname);
        params = qs.parse(toPARAM(url.query) || url.query);
        is_deps = params["no_dependencies"] === "true";
        if (utils.path.exists(p) && utils.path.is_directory(p)) {
          next();
          return;
        }
        urlconvert = new utils.UrlConvert(p, ROOT);
        srcpath = urlconvert.to_src();
        srcpath = compiler.path.findFileWithoutExtname(srcpath);
        utils.logger.trace("由 PRD " + req.url + " 解析至 SRC " + srcpath);
        switch (compiler.getContentType(urlconvert.uri)) {
          case "javascript":
            ctype = ".js";
            break;
          case "css":
            ctype = ".css";
            break;
          default:
            ctype = "";
        }
        res.writeHead(200, {
          'Content-Type': mime_config[ctype] + charset
        });
        cachekey = srcpath + (is_deps ? "_deps" : "");
        cache = compiler.booster.get_compiled_cache(cachekey);
        if (cache) {
          res.end(cache);
          return;
        }
        _render = function(err, txt) {
          if (err) {
            res.writeHead(500, {
              'Content-Type': mime_config[ctype] + charset
            });
            utils.logger.error(err);
            return res.end(err);
          } else {
            compiler.booster.set_compiled_cache(cachekey, txt);
            return res.end(txt);
          }
        };
        if (utils.path.exists(srcpath)) {
          config = new utils.config.parse(srcpath);
          return config.findExportFile(srcpath, function(path, parents) {
            if (options.noexport || is_deps) {
              path = srcpath;
            }
            if (path) {
              if (options.combine) {
                return combine(path, parents, _render);
              } else {
                return no_combine(path, parents, host, params, _render);
              }
            } else {
              return res.end("请确认文件 " + srcpath + " 存在于 fekit.config 的 export 中。");
            }
          });
        } else {
          return res.end("文件不存在 " + srcpath);
        }
      });
    });
  };

}).call(this);
