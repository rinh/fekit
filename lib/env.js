// Generated by CoffeeScript 1.7.1
(function() {
  var CONFIG, Del, Set, authorize, cpath, getRegistryUrl, getUserConfig, merge_user_config, setUserConfig, utils, _;

  _ = require('underscore');

  utils = require('./util');

  CONFIG = {
    registry: 'registry.fekit.org'
  };

  cpath = utils.path.join(utils.path.get_user_home(), ".fekitrc");

  exports.getUserConfig = getUserConfig = function() {
    return utils.file.io.readJSON(cpath);
  };

  exports.setUserConfig = setUserConfig = function(config) {
    return utils.file.io.write(cpath, JSON.stringify(config));
  };

  exports.set = Set = function(key, value) {
    var d;
    d = getUserConfig();
    d[key] = value;
    return setUserConfig(d);
  };

  exports.del = Del = function(key) {
    var d;
    d = getUserConfig();
    delete d[key];
    return setUserConfig(d);
  };

  merge_user_config = function() {
    var err;
    try {
      return _.extend(CONFIG, getUserConfig());
    } catch (_error) {
      err = _error;
    }
  };

  exports.get = function(key) {
    return CONFIG[key];
  };

  exports.each = function(cb) {
    var key, _results;
    _results = [];
    for (key in CONFIG) {
      _results.push(cb(key, CONFIG[key]));
    }
    return _results;
  };

  exports.getPackageUrl = function(name, version) {
    var registry;
    registry = CONFIG['registry'];
    registry = registry.replace(/http:\/\//, '').replace(/\/.*/, '');
    return ("http://" + registry + "/" + name + "/") + (version ? version : "");
  };

  exports.getRegistryUrl = getRegistryUrl = function(path) {
    return 'http://' + CONFIG['registry'].replace('http://', '').replace(/\//g, '') + path;
  };

  exports.getUserPasspharse = function() {
    var pharse_file;
    pharse_file = utils.path.join(utils.path.get_user_home(), ".fekit.pas");
    return utils.file.io.read(pharse_file);
  };


  /*
   *  返回 ~/.fekit/.extensions/ 下的已安装扩展
   *
   *  其中文件内容为,例: 
   *       svn.js     
   *           exports.path = "xxx/xxx/.js"
   *
   */

  exports.getExtensions = function() {
    var dir, list, up;
    up = utils.path;
    dir = up.join(up.get_user_home(), ".fekit", ".extensions");
    list = [];
    if (!up.exists(dir)) {
      return list;
    }
    up.each_directory(dir, (function(p) {
      var ext;
      ext = require(p);
      if (ext.path && ext.version) {
        return list.push(_.extend(ext, {
          name: up.fname(p)
        }));
      }
    }), false);
    return list;
  };

  exports.get_user_pharse_path = function() {
    return utils.path.join(utils.path.get_user_home(), ".fekit.pas");
  };


  /*
   *  检查当前环境是否登录
   */

  exports.authorize = authorize = function(cb) {
    var errmsg, pharse_file;
    errmsg = "该功能需要登录后使用. 请执行 fekit login 进行登录. 如果没有注册，请到 fekit源 网站进行注册.";
    pharse_file = utils.path.join(utils.path.get_user_home(), ".fekit.pas");
    if (!utils.path.exists(pharse_file)) {
      return cb(errmsg);
    }
    if (!CONFIG['user']) {
      return cb(errmsg);
    }
    return utils.http.put(getRegistryUrl('/user/login_private_key'), {
      username: CONFIG['user'],
      password: utils.file.io.read(pharse_file)
    }, function(err, body) {
      if (err) {
        return cb(err);
      }
      body = JSON.parse(body);
      if (!body.ret) {
        return cb(body.errmsg);
      }
      return cb(null, body.data);
    });
  };

  exports.authenticate = function(cb) {
    return authorize(function(err, body) {
      if (err) {
        return utils.logger.error(err);
      }
      return cb(null, body);
    });
  };

  merge_user_config();

}).call(this);
