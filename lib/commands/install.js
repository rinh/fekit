// Generated by CoffeeScript 1.7.1
(function() {
  var Package, async, doneCallback, env, getPackageConfig, saveToConfig, start, utils, _;

  _ = require('underscore');

  env = require('../env');

  utils = require('../util');

  async = require('async');

  Package = require('../package');

  exports.usage = "安装 fekit 组件 ";

  exports.set_options = function(optimist) {
    optimist.alias('c', 'useconfig');
    return optimist.describe('c', '强制使用配置文件中的版本范围。 如果没有配置文件或配置文件中没有配置，则不安装。安装后不改写配置文件。');
  };

  exports.run = function(options) {
    return start(options);
  };

  doneCallback = function(err) {
    if (err) {
      return utils.logger.error(err.toString());
    }
  };

  getPackageConfig = function(configPath, name) {
    var config, deps;
    if (!utils.path.exists(configPath)) {
      return null;
    }
    config = utils.file.io.readJSON(configPath);
    deps = config.dependencies || {};
    return deps[name];
  };

  saveToConfig = function(configPath, name, version) {
    var config, deps;
    if (!utils.path.exists(configPath)) {
      return;
    }
    config = utils.file.io.readJSON(configPath);
    deps = config.dependencies || {};
    deps[name] = version;
    config.dependencies = deps;
    return utils.file.io.write(configPath, JSON.stringify(config, {}, 4));
  };

  start = function(options) {
    var basepath, config, config_path, name, p, spec_pkg, ver;
    spec_pkg = options['_'][1];
    basepath = utils.path.closest(options.cwd, Package.FEKIT_MODULE_DIR, true);
    if (!basepath) {
      basepath = utils.path.closest(options.cwd, 'fekit.config');
    }
    if (!basepath) {
      basepath = options.cwd;
    }
    config_path = utils.path.join(basepath, 'fekit.config');
    if (!basepath) {
      basepath = options.cwd;
    }
    if (spec_pkg) {
      spec_pkg = spec_pkg.split('@');
      name = spec_pkg[0];
      ver = spec_pkg[1];
      if (options.useconfig) {
        ver = getPackageConfig(config_path, name);
        if (!ver) {
          utils.logger.error("在 fekit.config 中找不到关于 " + name + " 组件依赖配置.");
          return;
        }
      }
      p = new Package(name, ver, basepath);
      return p.preinstall(function(err) {
        if (err) {
          return doneCallback(err);
        }
        return p.install(function(err) {
          if (err) {
            return doneCallback(err);
          }
          if (!options.useconfig) {
            saveToConfig(config_path, p.name, p.version);
          }
          return p.report();
        });
      });
    } else {
      config = utils.config.parse(config_path);
      p = new Package();
      p.loadConfig(utils.path.dirname(config_path), config.root);
      return p.preinstall(function(err) {
        if (err) {
          return doneCallback(err);
        }
        return p.install(function(err) {
          if (err) {
            return doneCallback(err);
          }
          return p.report();
        });
      });
    }
  };

}).call(this);
