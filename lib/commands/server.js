// Generated by CoffeeScript 1.4.0
(function() {
  var compiler, connect, fs, host_rule, http, http_proxy, https, listenPort, middleware, setupProxyServer, setupServer, utils;

  utils = require("../util");

  fs = require("fs");

  connect = require("connect");

  http = require("http");

  https = require("https");

  compiler = require("../compiler/compiler");

  http_proxy = require("./_server_http_proxy");

  host_rule = require("./_server_host_rule");

  middleware = require("../middleware/index");

  exports.usage = "创建本地服务器, 可以基于其进行本地开发";

  exports.set_options = function(optimist) {
    optimist.alias('p', 'port');
    optimist.describe('p', '服务端口号, 一般无法使用 80 时设置, 并且需要自己做端口转发');
    optimist.alias('c', 'combine');
    optimist.describe('c', '指定所有文件以合并方式进行加载, 启动该参数则请求文件不会将依赖展开');
    optimist.alias('n', 'noexport');
    optimist.describe('n', '默认情况下，/prd/的请求需要加入export中才可以识别。 指定此选项则可以无视export属性');
    optimist.alias('b', 'boost');
    optimist.describe('b', '可以对编译结果缓存，以进行加速');
    optimist.alias('s', 'ssl');
    optimist.describe('s', '指定ssl证书文件，后缀为.crt');
    optimist.alias('m', 'mock');
    optimist.describe('m', '指定mock配置文件');
    optimist.alias('o', 'proxy');
    optimist.describe('o', '是否启用代理服务器, 默认端口为13180');
    optimist.alias('r', 'reverse');
    optimist.describe('r', '是否启用反向代理服务。');
    optimist.alias('e', 'environment');
    optimist.describe('e', '设置环境为`local`,`dev`,`beta`或`prd`');
    optimist.alias('w', 'without-java');
    return optimist.describe('w', '不使用 java 编译 velocity');
  };

  setupProxyServer = function(options) {
    return http_proxy.run(options);
  };

  setupServer = function(options) {
    var app, name, opts, path;
    app = connect().use(connect.logger('tiny')).use(connect.query()).use(connect.bodyParser()).use(middleware.mock(options)).use(middleware.velocity(options)).use(middleware.html(options)).use(middleware.fekit(options)).use(connect["static"](options.cwd, {
      hidden: true,
      redirect: true
    })).use(connect.directory(options.cwd));
    if (options.ssl) {
      name = utils.path.fname(options.ssl);
      path = utils.path.dirname(options.ssl);
      opts = {
        key: fs.readFileSync(utils.path.join(path, name + ".key")),
        cert: fs.readFileSync(utils.path.join(path, name + ".crt"))
      };
      return listenPort(https.createServer(opts, app), options.port || 443);
    } else {
      return listenPort(http.createServer(app), options.port || 80);
    }
  };

  listenPort = function(server, port) {
    server.on("error", function(e) {
      if (e.code === 'EADDRINUSE') {
        console.log("[ERROR]: 端口 " + port + " 已经被占用, 请关闭占用该端口的程序或者使用其它端口.");
      }
      if (e.code === 'EACCES') {
        console.log("[ERROR]: 权限不足, 请使用sudo执行.");
      }
      return process.exit(1);
    });
    server.on("listening", function(e) {
      utils.logger.log("fekit server 运行成功, 端口为 " + port + ".");
      return utils.logger.log("按 Ctrl + C 结束进程.");
    });
    return server.listen(port);
  };

  exports.run = function(options) {
    if (options.proxy || options.reverse) {
      options.rule = host_rule.load(typeof options.proxy === 'string' ? options.proxy : options.reverse);
    }
    setupServer(options);
    return setupProxyServer(options);
  };

}).call(this);
