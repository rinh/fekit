// Generated by CoffeeScript 1.4.0
(function() {
  var compiler, connect, dns, http, listenPort, mime_config, qs, rewrite, setupServer, sysfs, syspath, sysurl, urlrouter, utils, _rewriteObsoleteUrl, _routeRules;

  compiler = require("../compiler/compiler");

  utils = require("../util");

  connect = require("connect");

  rewrite = require("connect-url-rewrite");

  urlrouter = require("urlrouter");

  dns = require("dns");

  http = require("http");

  qs = require("querystring");

  sysurl = require("url");

  syspath = require("path");

  sysfs = require("fs");

  exports.usage = "创建本地服务器, 可以基于其进行本地开发";

  exports.set_options = function(optimist) {
    optimist.alias('p', 'port');
    optimist.describe('p', '服务端口号, 一般无法使用 80 时设置, 并且需要自己做端口转发');
    optimist.alias('r', 'route');
    optimist.describe('r', '路由,将指定路径路由到其它地址, 物理地址需要均在当前执行目录下. 格式为 项目名:路由后的物理目录名');
    optimist.alias('c', 'combine');
    optimist.describe('c', '指定所有文件以合并方式进行加载, 启动该参数则请求文件不会将依赖展开');
    optimist.alias('n', 'noexport');
    optimist.describe('n', '默认情况下，/prd/的请求需要加入export中才可以识别。 指定此选项则可以无视export属性');
    optimist.alias('t', 'transfer');
    return optimist.describe('t', '当指定该选项后，会识别以前的 qzz 项目 url');
  };

  mime_config = {
    ".js": "application/javascript",
    ".mustache": "application/javascript",
    ".css": "text/css"
  };

  _routeRules = function(options) {
    var list, r;
    list = [];
    if (options.route) {
      r = options.route.split(":");
      list.push("\/" + r[0] + "\/ \/" + r[1] + "\/");
    }
    return list;
  };

  _rewriteObsoleteUrl = function(options) {
    var reg;
    reg = /-(\d{16})/;
    if (!options.transfer) {
      return function(req, res, next) {
        return next();
      };
    }
    return function(req, res, next) {
      if (!utils.UrlConvert.PRODUCTION_REGEX.test(req.url)) {
        return next();
      }
      if (req.query.no_dependencies) {
        return next();
      }
      if (reg.test(req.url)) {
        req.url = req.url.replace(reg, '@$1');
      }
      return next();
    };
  };

  setupServer = function(options) {
    var ROOT, app, combine, fekitRouter, no_combine,
      _this = this;
    ROOT = options.cwd;
    no_combine = function(path, parents, host, params, doneCallback) {
      if (params["no_dependencies"] === "true") {
        return compiler.compile(path, {
          dependencies_filepath_list: parents,
          no_dependencies: true
        }, doneCallback);
      } else {
        return compiler.compile(path, {
          dependencies_filepath_list: parents,
          render_dependencies: function() {
            var partial, port;
            host = host.replace(/:\d+/, "");
            port = options.port && options.port !== "80" ? ":" + options.port : "";
            path = this.path.getFullPath().replace(ROOT, "").replace(/\\/g, '/').replace('/src/', '/prd/');
            partial = "http://" + host + port + path + "?no_dependencies=true";
            switch (this.path.getContentType()) {
              case "javascript":
                return "document.write('<script src=\"" + partial + "\"></script>');";
              case "css":
                return "@import url('" + partial + "');";
            }
          }
        }, doneCallback);
      }
    };
    combine = function(path, parents, doneCallback) {
      return compiler.compile(path, {
        dependencies_filepath_list: parents
      }, doneCallback);
    };
    fekitRouter = urlrouter(function(app) {
      return app.get(utils.UrlConvert.PRODUCTION_REGEX, function(req, res, next) {
        var config, host, is_deps, p, params, srcpath, url, urlconvert, _render;
        host = req.headers['host'];
        url = sysurl.parse(req.url);
        p = syspath.join(ROOT, url.pathname);
        params = qs.parse(url.query);
        is_deps = params["no_dependencies"] === "true";
        if (utils.path.exists(p) && utils.path.is_directory(p)) {
          next();
          return;
        }
        urlconvert = new utils.UrlConvert(p, ROOT);
        srcpath = urlconvert.to_src();
        utils.logger.trace("由 PRD " + req.url + " 解析至 SRC " + srcpath);
        res.writeHead(200, {
          'Content-Type': mime_config[urlconvert.extname]
        });
        _render = function(err, txt) {
          if (err) {
            res.writeHead(500);
            return res.end(err);
          } else {
            return res.end(txt);
          }
        };
        if (utils.path.exists(srcpath)) {
          config = new utils.config.parse(srcpath);
          return config.findExportFile(srcpath, function(path, parents) {
            if (options.noexport || is_deps) {
              path = srcpath;
            }
            if (path) {
              if (options.combine) {
                return combine(path, parents, _render);
              } else {
                return no_combine(path, parents, host, params, _render);
              }
            } else {
              return res.end("请确认文件 " + srcpath + " 存在于 fekit.config 的 export 中。");
            }
          });
        } else {
          return res.end("文件不存在 " + srcpath);
        }
      });
    });
    app = connect().use(connect.logger('tiny')).use(connect.query()).use(_rewriteObsoleteUrl(options)).use(rewrite(_routeRules(options))).use(connect.bodyParser()).use(fekitRouter).use(connect["static"](options.cwd, {
      hidden: true,
      redirect: true
    })).use(connect.directory(options.cwd));
    return listenPort(http.createServer(app), options.port || 80);
  };

  listenPort = function(server, port) {
    server.on("error", function(e) {
      if (e.code === 'EADDRINUSE') {
        console.log("[ERROR]: 端口 " + port + " 已经被占用, 请关闭占用该端口的程序或者使用其它端口.");
      }
      if (e.code === 'EACCES') {
        console.log("[ERROR]: 权限不足, 请使用sudo执行.");
      }
      return process.exit(1);
    });
    server.on("listening", function(e) {
      console.log("[LOG]: fekit server 运行成功, 端口为 " + port + ".");
      return console.log("[LOG]: 按 Ctrl + C 结束进程.");
    });
    return server.listen(port);
  };

  exports.run = function(options) {
    compiler.boost({
      cwd: process.cwd()
    });
    return setupServer(options);
  };

}).call(this);
