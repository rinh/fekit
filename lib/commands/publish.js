// Generated by CoffeeScript 1.7.1
(function() {
  var assert, async, check_fekit_config_file, env, lifecycle, pre_publish_hook, request, tar_package, temp, upload_package, utils, valid_fekit_config, _;

  env = require('../env');

  request = require('request');

  utils = require('../util');

  _ = require('underscore');

  async = require('async');

  temp = require('temp');

  exports.usage = "发布当前项目为组件包";

  exports.set_options = function(optimist) {
    return optimist;
  };

  exports.run = function(options) {
    return lifecycle(_.extend({}, options), [check_fekit_config_file, valid_fekit_config, tar_package, pre_publish_hook, upload_package]);
  };

  assert = function(opts, check_prop) {
    if (!opts[check_prop]) {
      throw "在 options 中需要有 " + check_prop + " .";
    }
  };

  lifecycle = function(options, list) {
    var get, _list;
    get = function(key) {
      if (options[key]) {
        return options[key];
      } else {
        throw "not found option key [" + key + "]";
      }
    };
    _list = list.map(function(func) {
      return function(callback) {
        var err;
        try {
          return func(options, callback);
        } catch (_error) {
          err = _error;
          return callback(err);
        }
      };
    });
    return async.series(_list, function(err) {
      if (err) {
        return utils.logger.error(err.toString());
      } else {
        return utils.logger.log("done.");
      }
    });
  };

  exports.check_fekit_config_file = check_fekit_config_file = function(opts, done) {
    return env.authenticate(function(err) {
      var p;
      if (err) {
        return done(err);
      }
      assert(opts, 'cwd');
      p = utils.path.join(opts.cwd, 'fekit.config');
      if (utils.path.exists(p)) {
        opts.fekit_config_path = p;
        return done();
      } else {
        return done("not found fekit.config");
      }
    });
  };

  exports.valid_fekit_config = valid_fekit_config = function(opts, done) {
    var json, p;
    assert(opts, 'fekit_config_path');
    p = opts.fekit_config_path;
    json = utils.file.io.readJSON(p);
    if (!json || !json.name || !json.version) {
      throw "fekit.config 格式不正确";
    }
    if (json.compiler !== 'component') {
      throw "如果需要发布组件，则 fekit.config 中的 compiler 必须为 component";
    }
    opts.config = json;
    return done();
  };

  exports.tar_package = tar_package = function(opts, done) {
    var tmp, tmp_targz;
    assert(opts, 'cwd');
    tmp = temp.path();
    tmp_targz = tmp + ".tgz";
    return utils.tar.pack(opts.cwd, tmp_targz, function(err) {
      if (err) {
        return done(err);
      }
      opts.tar_path = tmp_targz;
      return done();
    });
  };

  exports.pre_publish_hook = pre_publish_hook = function(opts, done) {
    var conf;
    conf = utils.config.parse(opts.fekit_config_path);
    conf.doScript('prepublish');
    return done();
  };

  exports.upload_package = upload_package = function(opts, done) {
    var url;
    url = env.getPackageUrl(opts.config.name);
    utils.logger.trace("tar file: " + opts.tar_path);
    return utils.http.put(url, opts.tar_path, {
      username: env.get('user'),
      password_md5: env.getUserPasspharse()
    }, function(err, body) {
      var json;
      if (err) {
        utils.logger.error(err);
        done();
        return;
      }
      json = JSON.parse(body || "{}");
      if (!json.ret) {
        utils.logger.error(json.errmsg);
      } else {
        utils.logger.log("publish success.");
      }
      return done();
    });
  };

}).call(this);
