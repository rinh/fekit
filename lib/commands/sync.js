// Generated by CoffeeScript 1.7.1
(function() {
  var child_process, rsync, shell, syspath, utils;

  syspath = require('path');

  utils = require('../util');

  child_process = require('child_process');

  exports.usage = "同步/上传当前目录至远程服务器(依赖rsync)";

  exports.set_options = function(optimist) {
    optimist.alias('f', 'file');
    optimist.describe('f', '更换其它的配置文件, 默认使用当前目录下的 .dev');
    optimist.alias('n', 'name');
    optimist.describe('n', '更换其它的配置名, 默认使用 dev');
    optimist.alias('i', 'include');
    optimist.describe('i', '同 rsync 的 include 选项');
    optimist.alias('e', 'exclude');
    optimist.describe('e', '同 rsync 的 exclude 选项');
    optimist.alias('x', 'nonexec');
    optimist.describe('x', '上传后禁止执行 shell');
    optimist.alias('d', 'delete');
    return optimist.describe('d', '删除服务器上本地不存在的文件');
  };

  rsync = function(opts) {
    var args, _args;
    _args = ["-rzcv", "--chmod=a='rX,u+w'", "--rsync-path='sudo rsync'", "" + opts.local, "" + opts.user + opts.host + ":" + opts.path, "" + (opts.include || ''), "" + (opts.exclude || ''), "--temp-dir=/tmp"];
    if (opts["delete"]) {
      _args.push('--delete');
    }
    args = _args.join(' ');
    utils.logger.log("[调用] rsync " + args);
    return child_process.exec("rsync " + args, function(err, stdout, stderr) {
      if (err) {
        throw err;
      }
      if (stdout) {
        utils.logger.log(stdout);
      }
      if (stderr) {
        utils.logger.error(stderr);
      }
      if (opts.shell && !opts.nonexec) {
        return shell(opts);
      }
    });
  };

  shell = function(opts) {
    var args, cmd;
    cmd = opts.shell.replace(/'/g, "\\'");
    args = "" + opts.user + opts.host + " '" + cmd + "'";
    utils.logger.log("[执行] ssh " + args);
    return child_process.exec("ssh " + args, function(err, stdout, stderr) {
      if (err) {
        throw err;
      }
      if (stdout) {
        utils.logger.log(stdout);
      }
      if (stderr) {
        return utils.logger.error(stderr);
      }
    });
  };

  exports.run = function(options) {
    var conf, default_exclude, default_include, item, opts, path, yaml;
    path = utils.path.existsFiles(options.cwd, [options.file || ".dev", "fekit.config"]);
    yaml = new utils.file.reader().readJSON(path);
    conf = yaml['dev'];
    if (options.name && yaml[options.name]) {
      conf = yaml[options.name];
    }
    if (!conf) {
      utils.logger.error("没有匹配的 " + (options.name || 'dev') + " 节点");
      return;
    }
    opts = {
      host: conf.host,
      path: conf.path,
      local: conf.local || './',
      user: (conf.user ? conf.user + "@" : ""),
      shell: conf.shell
    };
    default_include = [];
    if (conf['include'] && conf['include'].length > 0) {
      default_include = default_include.concat(conf['include']);
    }
    if (options.include && options.include.length) {
      default_include = default_include.concat(options.include);
    }
    if (default_include.length > 0) {
      opts.include = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = default_include.length; _i < _len; _i++) {
          item = default_include[_i];
          _results.push("--include=" + item);
        }
        return _results;
      })()).join(' ');
    }
    default_exclude = ['.svn'];
    if (conf['exclude'] && conf['exclude'].length > 0) {
      default_exclude = default_exclude.concat(conf['exclude']);
    }
    if (options.exclude && options.exclude.length) {
      default_exclude = default_exclude.concat(options.exclude);
    }
    if (default_exclude.length > 0) {
      opts.exclude = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = default_exclude.length; _i < _len; _i++) {
          item = default_exclude[_i];
          _results.push("--exclude=" + item);
        }
        return _results;
      })()).join(' ');
    }
    return rsync(opts);
  };

}).call(this);
